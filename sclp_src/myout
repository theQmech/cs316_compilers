
	.data
q:	.word 0
w:	.space 8
qq:	.word 0
ww:	.space 8
string0:	 .asciiz 	"Hi\n"

	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 28		# Make space for the locals
# Prologue ends

	li $v0, 10
	sw $v0, 0($fp)
	l.d $f2, -12($fp)
	s.d $f2, 0($sp)
	lw $v0, 0($fp)
	sw $v0, -8($sp)
	sub $sp, $sp, 12
	jal qaz
	add $sp, $sp, 12
	move $t0, $v1
	sw $t0, -4($fp)
	j epilogue_main

# Epilogue Begins
epilogue_main:
	add $sp, $sp, 28
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends


	.text 			# The .text assembler directive indicates
	.globl qaz		# The following is the code (as oppose to data)
qaz:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $ra, 0($sp)		# Save the return address
	sw $fp, -4($sp)		# Save the frame pointer
	sub $fp, $sp, 8		# Update the frame pointer

	sub $sp, $sp, 12		# Make space for the locals
# Prologue ends

	li $v0, 1
	sw $v0, q
	li $v0, 0
	sw $v0, 0($fp)
	addi $sp, $sp, -4
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -8
	s.d $f12, 0($sp)
	la $a0, string0
	li $v0, 4
	syscall 
	l.d $f12, 0($sp)
	addi $sp, $sp, 8
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $v0, 0($sp)
	addi $sp, $sp, 4
	lw $v0, 0($fp)
	addi $sp, $sp, -4
	sw $v0, 0($sp)
	addi $sp, $sp, -4
	sw $a0, 0($sp)
	addi $sp, $sp, -8
	s.d $f12, 0($sp)
	move $a0, $v0
	li $v0, 1
	syscall 
	l.d $f12, 0($sp)
	addi $sp, $sp, 8
	lw $a0, 0($sp)
	addi $sp, $sp, 4
	lw $v0, 0($sp)
	addi $sp, $sp, 4
	lw $t0, 0($fp)
	move $v1, $t0
	j epilogue_qaz

# Epilogue Begins
epilogue_qaz:
	add $sp, $sp, 12
	lw $fp, -4($sp)  
	lw $ra, 0($sp)   
	jr        $31		# Jump back to the called procedure
# Epilogue Ends

